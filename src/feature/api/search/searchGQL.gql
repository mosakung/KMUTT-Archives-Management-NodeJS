extend type Query {
  searchDocument(searchSet: InputSearch): TupleSearchResult
}

input InputSearch {
  search: [String]!,
  contributor: [String]!,
  contributorRole: [String]!,
  creator: [String]!,
  creatorOrganizationName: [String]!,
  publisher: [String]!,
  year: [Int]!
}

type TupleSearchResult {
  foundDocument: Int,
  documentRelevance: [DocumentRelevance],
  efficiencyInputSearch: EfficiencyInputSearch,
  errorMessage: String,
}

type DocumentRelevance {
  documentId: Int,
  relevanceScore: Float
}

type EfficiencyInputSearch {
  fulltext: String,
  keywordDeepcut: [KeywordDeepcut]
}

type KeywordDeepcut {
  keyword: String,
  used: Boolean
}
