extend type Query {
  documentStatusMultiple: [DocumentStatus]
  documentStatus(documentId: Int!): DocumentStatus
  pageInDocument(documentId: Int!): [Page]
  keywordInPage(pageId: Int!): [PreTerm]
  imageInPage(pageId: Int!) : [Image]
}

extend type Mutation {
  insertPreterm(newPreterm: String!, pageId: Int!): PreTerm,
  editPreterm(newPreterm: String!, preTermId: Int!): PreTerm,
  deletePreterm(preTermId: Int!): Boolean,
  overridePerterm(newInformation: InputSeleceOverridePerterm!): ResultOverridePerterm,
  changeStatusPage(pageId: Int!, status: Int!): Boolean,
  startTfDjango(documentId: Int!): ResultStartTF
}

input InputSeleceOverridePerterm {
  overide: [InputOverridePerterm],
  newPage: [InputNewPagePerTerm]
}

input InputOverridePerterm {
  pageId: Int!,
  token: [String]
}

input InputNewPagePerTerm {
  pageIndex: Int!,
  name: String,
  documentId: Int!,
  token: [String]
}

type ResultOverridePerterm {
  overidestatus: Boolean,
  addNewStatus: [ResultAddNewStatus]
}

type ResultAddNewStatus {
  pageIndex: Int,
  documentId: Int,
  status: Boolean
}

type ResultStartTF {
  status: Boolean,
  message: String,
}

type DocumentStatus {
  documentId: Int,
  name: String,
  version: Int,
  status: Int,
  pages: [Page]
}

type Page {
  pageId: Int,
  index: Int,
  name: String,
  status: Int
}

type PreTerm {
  preTermId: Int,
  preTerm: String
}

type Image {
  image: String
}
